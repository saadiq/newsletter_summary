---
description: Application structure including modules and tests
globs: 
alwaysApply: false
---
# App Structure Overview

The main entry point is @main.py, which orchestrates the workflow for summarizing AI newsletters. The codebase is modularized as follows:

- @auth.py: Handles Gmail OAuth authentication and token management.
- @fetch.py: Fetches and parses emails from Gmail, applying filters and extracting relevant fields.
- @utils.py: Contains utility functions including `clean_body()` for cleaning email HTML content and converting to markdown.
- @llm.py: Processes newsletters and prompts an LLM (OpenAI or Anthropic) for topic extraction and actionable summaries in a single step via `analyze_newsletters_unified()`. Includes OpenRouter integration for cost tracking and analytics.
- @report.py: Generates the final markdown report, including top developments, sources, and methodology. Handles newsletter website mapping and caching.
- @review_newsletter_websites.py: CLI tool for reviewing and verifying newsletter website mappings in the cache.
- @analyze_costs.py: Analyzes and reports on OpenRouter usage costs and token consumption patterns.
- @verify_openrouter.py: Tests the OpenRouter integration to ensure it's properly configured.

## Key Features

- Uses a streamlined direct-to-LLM approach for topic extraction and summarization
- Supports up to 10 topics (default) ordered by importance
- Enhanced HTML cleanup for better text extraction from newsletter emails
- Configurable via command-line arguments including number of topics and LLM provider
- OpenRouter integration for cost tracking and analytics of LLM API calls
- Fallback mechanisms to handle API failures gracefully

## Testing

- @test_fetch_api.py: Unit tests for email fetching and parsing logic.
- @test_e2e_cli.py: End-to-end tests for the CLI workflow and report generation.

## Configuration

- Environment variables: Control API keys, output directory, and OpenRouter settings
- Command-line arguments: Control behavior for each run (days, label, provider, etc.)
- `.env.local`: Local environment configuration (API keys, OpenRouter settings)

Supporting files include @requirements.txt, @requirements-dev.txt, @newsletter_websites.json (website cache), and configuration files for environment variables and tokens.
