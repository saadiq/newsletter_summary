name: Generate Newsletter Summary

on:
  schedule:
    # Run every Sunday at 10 AM UTC
    - cron: '0 10 * * 0'
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days to look back'
        required: false
        default: '7'
      label:
        description: 'Gmail label to filter'
        required: false
        default: 'ai-newsletter'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup Gmail credentials
      env:
        GMAIL_CREDENTIALS: ${{ secrets.GMAIL_CREDENTIALS }}
        GMAIL_TOKEN: ${{ secrets.GMAIL_TOKEN }}
      run: |
        # Debug: Check if secrets are set
        if [ -z "$GMAIL_CREDENTIALS" ]; then
          echo "ERROR: GMAIL_CREDENTIALS secret is not set"
          echo "Please add GMAIL_CREDENTIALS secret to your repository"
          echo "See docs/github-secrets-setup.md for instructions"
          exit 1
        fi
        if [ -z "$GMAIL_TOKEN" ]; then
          echo "ERROR: GMAIL_TOKEN secret is not set"
          echo "Please add GMAIL_TOKEN secret to your repository"
          echo "See docs/github-secrets-setup.md for instructions"
          exit 1
        fi
        
        # Write credentials from secrets (handle potential formatting issues)
        echo "$GMAIL_CREDENTIALS" | tr -d '\r' > credentials.json
        echo "$GMAIL_TOKEN" | tr -d '\r' > token.json
        
        # Validate JSON files
        echo "Validating credentials.json..."
        if python -m json.tool credentials.json > /dev/null 2>&1; then
          echo "✓ credentials.json is valid JSON"
        else
          echo "✗ credentials.json is INVALID JSON"
          echo "First 100 chars: $(head -c 100 credentials.json)"
          exit 1
        fi
        
        echo "Validating token.json..."
        if python -m json.tool token.json > /dev/null 2>&1; then
          echo "✓ token.json is valid JSON"
        else
          echo "✗ token.json is INVALID JSON"
          echo "First 100 chars: $(head -c 100 token.json)"
          echo "Please check that the GMAIL_TOKEN secret contains valid JSON"
          exit 1
        fi
        
        # Debug: Check file sizes
        echo "credentials.json size: $(wc -c < credentials.json) bytes"
        echo "token.json size: $(wc -c < token.json) bytes"
    
    - name: Generate newsletter summary
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        # Limit parallel workers to avoid segfault in GitHub Actions
        NEWSLETTER_PARALLEL_WORKERS: "1"  # Sequential processing to avoid memory issues
      run: |
        # Configure git identity before running (in case commit happens)
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Debug: Test Gmail authentication
        python -c "from auth import authenticate_gmail; service = authenticate_gmail(); print('Gmail auth successful')" || echo "Gmail auth failed"
        
        # Run the summarizer with verbose output and memory limits
        # Use sequential processing for large newsletter batches
        ulimit -v 2097152  # Limit virtual memory to 2GB
        python main.py \
          --days ${{ github.event.inputs.days || '7' }} \
          --label "${{ github.event.inputs.label || 'ai-newsletter' }}" \
          --output docs/_posts \
          --commit || {
            echo "Summary generation failed. Checking for mock data..."
            # If real fetch fails, try with mock data for testing
            export NEWSLETTER_SUMMARY_MOCK_DATA='[{"subject": "Debug Test", "date": "Thu, 15 Aug 2025 10:00:00 +0000", "sender": "debug@test.com", "body": "This is a debug test because Gmail fetch failed."}]'
            python main.py --days 1 --output docs/_posts --commit
        }
    
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Push changes
      run: |
        git push origin main
    
    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages